/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: gen.i

#define SWIGMODULE gen

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <stdint.h>		// Use the C99 official header


static uint8_t *new_byteArray(int nelements) { 
  return new uint8_t[nelements](); 
}

static void delete_byteArray(uint8_t *ary) { 
  delete [] ary; 
}

static uint8_t byteArray_getitem(uint8_t *ary, int index) {
    return ary[index];
}
static void byteArray_setitem(uint8_t *ary, int index, uint8_t value) {
    ary[index] = value;
}


	#include "./third_party/rplidar_sdk-release-v1.12.0/sdk/sdk/include/rplidar.h"	


static rplidar_response_measurement_node_hq_t *new_measurementNodeHqArray(int nelements) { 
  return new rplidar_response_measurement_node_hq_t[nelements](); 
}

static void delete_measurementNodeHqArray(rplidar_response_measurement_node_hq_t *ary) { 
  delete [] ary; 
}

static rplidar_response_measurement_node_hq_t measurementNodeHqArray_getitem(rplidar_response_measurement_node_hq_t *ary, int index) {
    return ary[index];
}
static void measurementNodeHqArray_setitem(rplidar_response_measurement_node_hq_t *ary, int index, rplidar_response_measurement_node_hq_t value) {
    ary[index] = value;
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_gen_37f4c5c4e69870d1(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_gen_37f4c5c4e69870d1(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


char *_wrap_new_byteArray_gen_37f4c5c4e69870d1(intgo _swig_go_0) {
  int arg1 ;
  uint8_t *result = 0 ;
  char *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (uint8_t *)new_byteArray(arg1);
  *(uint8_t **)&_swig_go_result = (uint8_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_byteArray_gen_37f4c5c4e69870d1(char *_swig_go_0) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  
  arg1 = *(uint8_t **)&_swig_go_0; 
  
  delete_byteArray(arg1);
  
}


char _wrap_byteArray_getitem_gen_37f4c5c4e69870d1(char *_swig_go_0, intgo _swig_go_1) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(uint8_t **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (uint8_t)byteArray_getitem(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_byteArray_setitem_gen_37f4c5c4e69870d1(char *_swig_go_0, intgo _swig_go_1, char _swig_go_2) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  
  arg1 = *(uint8_t **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (uint8_t)_swig_go_2; 
  
  byteArray_setitem(arg1,arg2,arg3);
  
}


intgo _wrap_RESULT_INVALID_DATA_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8000|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_OPERATION_FAIL_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8001|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_OPERATION_TIMEOUT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8002|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_OPERATION_STOP_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8003|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_OPERATION_NOT_SUPPORT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8004|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_FORMAT_NOT_SUPPORT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8005|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_INSUFFICIENT_MEMORY_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8006|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_OPERATION_ABORTED_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8007|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_NOT_FOUND_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8008|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RESULT_RECONNECTING_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x8009|0x80000000));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPLIDAR_ANS_HEADER_SUBTYPE_SHIFT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((30));
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_cmd_packet_t_syncByte_set_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0, char _swig_go_1) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->syncByte = arg2;
  
}


char _wrap_rplidar_cmd_packet_t_syncByte_get_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->syncByte);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_cmd_packet_t_cmd_flag_set_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0, char _swig_go_1) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->cmd_flag = arg2;
  
}


char _wrap_rplidar_cmd_packet_t_cmd_flag_get_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->cmd_flag);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_cmd_packet_t_size_set_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0, char _swig_go_1) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->size = arg2;
  
}


char _wrap_rplidar_cmd_packet_t_size_get_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->size);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_cmd_packet_t_data_set_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0, char *_swig_go_1) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 *arg2 ;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  arg2 = *(_u8 **)&_swig_go_1; 
  
  {
    size_t ii;
    _u8 *b = (_u8 *) arg1->data;
    for (ii = 0; ii < (size_t)0; ii++) b[ii] = *((_u8 *) arg2 + ii);
  }
  
}


char *_wrap_rplidar_cmd_packet_t_data_get_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  _u8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  
  result = (_u8 *)(_u8 *) ((arg1)->data);
  *(_u8 **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_cmd_packet_t *_wrap_new_rplidar_cmd_packet_t_gen_37f4c5c4e69870d1() {
  _rplidar_cmd_packet_t *result = 0 ;
  _rplidar_cmd_packet_t *_swig_go_result;
  
  
  result = (_rplidar_cmd_packet_t *)new _rplidar_cmd_packet_t();
  *(_rplidar_cmd_packet_t **)&_swig_go_result = (_rplidar_cmd_packet_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_cmd_packet_t_gen_37f4c5c4e69870d1(_rplidar_cmd_packet_t *_swig_go_0) {
  _rplidar_cmd_packet_t *arg1 = (_rplidar_cmd_packet_t *) 0 ;
  
  arg1 = *(_rplidar_cmd_packet_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_ans_header_t_syncByte1_set_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0, char _swig_go_1) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->syncByte1 = arg2;
  
}


char _wrap_rplidar_ans_header_t_syncByte1_get_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->syncByte1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_ans_header_t_syncByte2_set_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0, char _swig_go_1) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->syncByte2 = arg2;
  
}


char _wrap_rplidar_ans_header_t_syncByte2_get_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->syncByte2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_ans_header_t_size_q30_subtype_set_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0, intgo _swig_go_1) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->size_q30_subtype = arg2;
  
}


intgo _wrap_rplidar_ans_header_t_size_q30_subtype_get_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->size_q30_subtype);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_ans_header_t_Xtype_set_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0, char _swig_go_1) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


char _wrap_rplidar_ans_header_t_Xtype_get_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->type);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_ans_header_t *_wrap_new_rplidar_ans_header_t_gen_37f4c5c4e69870d1() {
  _rplidar_ans_header_t *result = 0 ;
  _rplidar_ans_header_t *_swig_go_result;
  
  
  result = (_rplidar_ans_header_t *)new _rplidar_ans_header_t();
  *(_rplidar_ans_header_t **)&_swig_go_result = (_rplidar_ans_header_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_ans_header_t_gen_37f4c5c4e69870d1(_rplidar_ans_header_t *_swig_go_0) {
  _rplidar_ans_header_t *arg1 = (_rplidar_ans_header_t *) 0 ;
  
  arg1 = *(_rplidar_ans_header_t **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RPLIDAR_HQ_SCAN_FLAG_CCW_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 0));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPLIDAR_HQ_SCAN_FLAG_RAW_ENCODER_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 1));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPLIDAR_HQ_SCAN_FLAG_RAW_DISTANCE_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 2));
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_payload_express_scan_t_working_mode_set_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0, char _swig_go_1) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->working_mode = arg2;
  
}


char _wrap_rplidar_payload_express_scan_t_working_mode_get_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->working_mode);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_payload_express_scan_t_working_flags_set_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0, short _swig_go_1) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->working_flags = arg2;
  
}


short _wrap_rplidar_payload_express_scan_t_working_flags_get_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->working_flags);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_payload_express_scan_t_param_set_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0, short _swig_go_1) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->param = arg2;
  
}


short _wrap_rplidar_payload_express_scan_t_param_get_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->param);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_payload_express_scan_t *_wrap_new_rplidar_payload_express_scan_t_gen_37f4c5c4e69870d1() {
  _rplidar_payload_express_scan_t *result = 0 ;
  _rplidar_payload_express_scan_t *_swig_go_result;
  
  
  result = (_rplidar_payload_express_scan_t *)new _rplidar_payload_express_scan_t();
  *(_rplidar_payload_express_scan_t **)&_swig_go_result = (_rplidar_payload_express_scan_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_payload_express_scan_t_gen_37f4c5c4e69870d1(_rplidar_payload_express_scan_t *_swig_go_0) {
  _rplidar_payload_express_scan_t *arg1 = (_rplidar_payload_express_scan_t *) 0 ;
  
  arg1 = *(_rplidar_payload_express_scan_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_payload_hq_scan_t_flag_set_gen_37f4c5c4e69870d1(_rplidar_payload_hq_scan_t *_swig_go_0, char _swig_go_1) {
  _rplidar_payload_hq_scan_t *arg1 = (_rplidar_payload_hq_scan_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_payload_hq_scan_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->flag = arg2;
  
}


char _wrap_rplidar_payload_hq_scan_t_flag_get_gen_37f4c5c4e69870d1(_rplidar_payload_hq_scan_t *_swig_go_0) {
  _rplidar_payload_hq_scan_t *arg1 = (_rplidar_payload_hq_scan_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_payload_hq_scan_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->flag);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_payload_hq_scan_t_reserved_set_gen_37f4c5c4e69870d1(_rplidar_payload_hq_scan_t *_swig_go_0, char *_swig_go_1) {
  _rplidar_payload_hq_scan_t *arg1 = (_rplidar_payload_hq_scan_t *) 0 ;
  _u8 *arg2 ;
  
  arg1 = *(_rplidar_payload_hq_scan_t **)&_swig_go_0; 
  arg2 = *(_u8 **)&_swig_go_1; 
  
  {
    size_t ii;
    _u8 *b = (_u8 *) arg1->reserved;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((_u8 *) arg2 + ii);
  }
  
}


char *_wrap_rplidar_payload_hq_scan_t_reserved_get_gen_37f4c5c4e69870d1(_rplidar_payload_hq_scan_t *_swig_go_0) {
  _rplidar_payload_hq_scan_t *arg1 = (_rplidar_payload_hq_scan_t *) 0 ;
  _u8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(_rplidar_payload_hq_scan_t **)&_swig_go_0; 
  
  result = (_u8 *)(_u8 *) ((arg1)->reserved);
  *(_u8 **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_payload_hq_scan_t *_wrap_new_rplidar_payload_hq_scan_t_gen_37f4c5c4e69870d1() {
  _rplidar_payload_hq_scan_t *result = 0 ;
  _rplidar_payload_hq_scan_t *_swig_go_result;
  
  
  result = (_rplidar_payload_hq_scan_t *)new _rplidar_payload_hq_scan_t();
  *(_rplidar_payload_hq_scan_t **)&_swig_go_result = (_rplidar_payload_hq_scan_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_payload_hq_scan_t_gen_37f4c5c4e69870d1(_rplidar_payload_hq_scan_t *_swig_go_0) {
  _rplidar_payload_hq_scan_t *arg1 = (_rplidar_payload_hq_scan_t *) 0 ;
  
  arg1 = *(_rplidar_payload_hq_scan_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_payload_get_scan_conf_t_Xtype_set_gen_37f4c5c4e69870d1(_rplidar_payload_get_scan_conf_t *_swig_go_0, intgo _swig_go_1) {
  _rplidar_payload_get_scan_conf_t *arg1 = (_rplidar_payload_get_scan_conf_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_payload_get_scan_conf_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


intgo _wrap_rplidar_payload_get_scan_conf_t_Xtype_get_gen_37f4c5c4e69870d1(_rplidar_payload_get_scan_conf_t *_swig_go_0) {
  _rplidar_payload_get_scan_conf_t *arg1 = (_rplidar_payload_get_scan_conf_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_payload_get_scan_conf_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->type);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_payload_get_scan_conf_t_reserved_set_gen_37f4c5c4e69870d1(_rplidar_payload_get_scan_conf_t *_swig_go_0, char *_swig_go_1) {
  _rplidar_payload_get_scan_conf_t *arg1 = (_rplidar_payload_get_scan_conf_t *) 0 ;
  _u8 *arg2 ;
  
  arg1 = *(_rplidar_payload_get_scan_conf_t **)&_swig_go_0; 
  arg2 = *(_u8 **)&_swig_go_1; 
  
  {
    size_t ii;
    _u8 *b = (_u8 *) arg1->reserved;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((_u8 *) arg2 + ii);
  }
  
}


char *_wrap_rplidar_payload_get_scan_conf_t_reserved_get_gen_37f4c5c4e69870d1(_rplidar_payload_get_scan_conf_t *_swig_go_0) {
  _rplidar_payload_get_scan_conf_t *arg1 = (_rplidar_payload_get_scan_conf_t *) 0 ;
  _u8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(_rplidar_payload_get_scan_conf_t **)&_swig_go_0; 
  
  result = (_u8 *)(_u8 *) ((arg1)->reserved);
  *(_u8 **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_payload_get_scan_conf_t *_wrap_new_rplidar_payload_get_scan_conf_t_gen_37f4c5c4e69870d1() {
  _rplidar_payload_get_scan_conf_t *result = 0 ;
  _rplidar_payload_get_scan_conf_t *_swig_go_result;
  
  
  result = (_rplidar_payload_get_scan_conf_t *)new _rplidar_payload_get_scan_conf_t();
  *(_rplidar_payload_get_scan_conf_t **)&_swig_go_result = (_rplidar_payload_get_scan_conf_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_payload_get_scan_conf_t_gen_37f4c5c4e69870d1(_rplidar_payload_get_scan_conf_t *_swig_go_0) {
  _rplidar_payload_get_scan_conf_t *arg1 = (_rplidar_payload_get_scan_conf_t *) 0 ;
  
  arg1 = *(_rplidar_payload_get_scan_conf_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_payload_motor_pwm_t_pwm_value_set_gen_37f4c5c4e69870d1(_rplidar_payload_motor_pwm_t *_swig_go_0, short _swig_go_1) {
  _rplidar_payload_motor_pwm_t *arg1 = (_rplidar_payload_motor_pwm_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_payload_motor_pwm_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->pwm_value = arg2;
  
}


short _wrap_rplidar_payload_motor_pwm_t_pwm_value_get_gen_37f4c5c4e69870d1(_rplidar_payload_motor_pwm_t *_swig_go_0) {
  _rplidar_payload_motor_pwm_t *arg1 = (_rplidar_payload_motor_pwm_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_payload_motor_pwm_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->pwm_value);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_payload_motor_pwm_t *_wrap_new_rplidar_payload_motor_pwm_t_gen_37f4c5c4e69870d1() {
  _rplidar_payload_motor_pwm_t *result = 0 ;
  _rplidar_payload_motor_pwm_t *_swig_go_result;
  
  
  result = (_rplidar_payload_motor_pwm_t *)new _rplidar_payload_motor_pwm_t();
  *(_rplidar_payload_motor_pwm_t **)&_swig_go_result = (_rplidar_payload_motor_pwm_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_payload_motor_pwm_t_gen_37f4c5c4e69870d1(_rplidar_payload_motor_pwm_t *_swig_go_0) {
  _rplidar_payload_motor_pwm_t *arg1 = (_rplidar_payload_motor_pwm_t *) 0 ;
  
  arg1 = *(_rplidar_payload_motor_pwm_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_payload_acc_board_flag_t_reserved_set_gen_37f4c5c4e69870d1(_rplidar_payload_acc_board_flag_t *_swig_go_0, intgo _swig_go_1) {
  _rplidar_payload_acc_board_flag_t *arg1 = (_rplidar_payload_acc_board_flag_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_payload_acc_board_flag_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->reserved = arg2;
  
}


intgo _wrap_rplidar_payload_acc_board_flag_t_reserved_get_gen_37f4c5c4e69870d1(_rplidar_payload_acc_board_flag_t *_swig_go_0) {
  _rplidar_payload_acc_board_flag_t *arg1 = (_rplidar_payload_acc_board_flag_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_payload_acc_board_flag_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->reserved);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_payload_acc_board_flag_t *_wrap_new_rplidar_payload_acc_board_flag_t_gen_37f4c5c4e69870d1() {
  _rplidar_payload_acc_board_flag_t *result = 0 ;
  _rplidar_payload_acc_board_flag_t *_swig_go_result;
  
  
  result = (_rplidar_payload_acc_board_flag_t *)new _rplidar_payload_acc_board_flag_t();
  *(_rplidar_payload_acc_board_flag_t **)&_swig_go_result = (_rplidar_payload_acc_board_flag_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_payload_acc_board_flag_t_gen_37f4c5c4e69870d1(_rplidar_payload_acc_board_flag_t *_swig_go_0) {
  _rplidar_payload_acc_board_flag_t *arg1 = (_rplidar_payload_acc_board_flag_t *) 0 ;
  
  arg1 = *(_rplidar_payload_acc_board_flag_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_payload_hq_spd_ctrl_t_rpm_set_gen_37f4c5c4e69870d1(_rplidar_payload_hq_spd_ctrl_t *_swig_go_0, short _swig_go_1) {
  _rplidar_payload_hq_spd_ctrl_t *arg1 = (_rplidar_payload_hq_spd_ctrl_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_payload_hq_spd_ctrl_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->rpm = arg2;
  
}


short _wrap_rplidar_payload_hq_spd_ctrl_t_rpm_get_gen_37f4c5c4e69870d1(_rplidar_payload_hq_spd_ctrl_t *_swig_go_0) {
  _rplidar_payload_hq_spd_ctrl_t *arg1 = (_rplidar_payload_hq_spd_ctrl_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_payload_hq_spd_ctrl_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->rpm);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_payload_hq_spd_ctrl_t *_wrap_new_rplidar_payload_hq_spd_ctrl_t_gen_37f4c5c4e69870d1() {
  _rplidar_payload_hq_spd_ctrl_t *result = 0 ;
  _rplidar_payload_hq_spd_ctrl_t *_swig_go_result;
  
  
  result = (_rplidar_payload_hq_spd_ctrl_t *)new _rplidar_payload_hq_spd_ctrl_t();
  *(_rplidar_payload_hq_spd_ctrl_t **)&_swig_go_result = (_rplidar_payload_hq_spd_ctrl_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_payload_hq_spd_ctrl_t_gen_37f4c5c4e69870d1(_rplidar_payload_hq_spd_ctrl_t *_swig_go_0) {
  _rplidar_payload_hq_spd_ctrl_t *arg1 = (_rplidar_payload_hq_spd_ctrl_t *) 0 ;
  
  arg1 = *(_rplidar_payload_hq_spd_ctrl_t **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RPLIDAR_RESP_ACC_BOARD_FLAG_MOTOR_CTRL_SUPPORT_MASK_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1));
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_acc_board_flag_t_support_flag_set_gen_37f4c5c4e69870d1(_rplidar_response_acc_board_flag_t *_swig_go_0, intgo _swig_go_1) {
  _rplidar_response_acc_board_flag_t *arg1 = (_rplidar_response_acc_board_flag_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_response_acc_board_flag_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->support_flag = arg2;
  
}


intgo _wrap_rplidar_response_acc_board_flag_t_support_flag_get_gen_37f4c5c4e69870d1(_rplidar_response_acc_board_flag_t *_swig_go_0) {
  _rplidar_response_acc_board_flag_t *arg1 = (_rplidar_response_acc_board_flag_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_response_acc_board_flag_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->support_flag);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_acc_board_flag_t *_wrap_new_rplidar_response_acc_board_flag_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_acc_board_flag_t *result = 0 ;
  _rplidar_response_acc_board_flag_t *_swig_go_result;
  
  
  result = (_rplidar_response_acc_board_flag_t *)new _rplidar_response_acc_board_flag_t();
  *(_rplidar_response_acc_board_flag_t **)&_swig_go_result = (_rplidar_response_acc_board_flag_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_acc_board_flag_t_gen_37f4c5c4e69870d1(_rplidar_response_acc_board_flag_t *_swig_go_0) {
  _rplidar_response_acc_board_flag_t *arg1 = (_rplidar_response_acc_board_flag_t *) 0 ;
  
  arg1 = *(_rplidar_response_acc_board_flag_t **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RPLIDAR_RESP_MEASUREMENT_SYNCBIT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 0));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPLIDAR_RESP_HQ_FLAG_SYNCBIT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 0));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPLIDAR_RESP_MEASUREMENT_CHECKBIT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 0));
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_sample_rate_t_std_sample_duration_us_set_gen_37f4c5c4e69870d1(_rplidar_response_sample_rate_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_sample_rate_t *arg1 = (_rplidar_response_sample_rate_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_sample_rate_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->std_sample_duration_us = arg2;
  
}


short _wrap_rplidar_response_sample_rate_t_std_sample_duration_us_get_gen_37f4c5c4e69870d1(_rplidar_response_sample_rate_t *_swig_go_0) {
  _rplidar_response_sample_rate_t *arg1 = (_rplidar_response_sample_rate_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_sample_rate_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->std_sample_duration_us);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_sample_rate_t_express_sample_duration_us_set_gen_37f4c5c4e69870d1(_rplidar_response_sample_rate_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_sample_rate_t *arg1 = (_rplidar_response_sample_rate_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_sample_rate_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->express_sample_duration_us = arg2;
  
}


short _wrap_rplidar_response_sample_rate_t_express_sample_duration_us_get_gen_37f4c5c4e69870d1(_rplidar_response_sample_rate_t *_swig_go_0) {
  _rplidar_response_sample_rate_t *arg1 = (_rplidar_response_sample_rate_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_sample_rate_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->express_sample_duration_us);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_sample_rate_t *_wrap_new_rplidar_response_sample_rate_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_sample_rate_t *result = 0 ;
  _rplidar_response_sample_rate_t *_swig_go_result;
  
  
  result = (_rplidar_response_sample_rate_t *)new _rplidar_response_sample_rate_t();
  *(_rplidar_response_sample_rate_t **)&_swig_go_result = (_rplidar_response_sample_rate_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_sample_rate_t_gen_37f4c5c4e69870d1(_rplidar_response_sample_rate_t *_swig_go_0) {
  _rplidar_response_sample_rate_t *arg1 = (_rplidar_response_sample_rate_t *) 0 ;
  
  arg1 = *(_rplidar_response_sample_rate_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_measurement_node_t_sync_quality_set_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->sync_quality = arg2;
  
}


char _wrap_rplidar_response_measurement_node_t_sync_quality_get_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->sync_quality);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_measurement_node_t_angle_q6_checkbit_set_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->angle_q6_checkbit = arg2;
  
}


short _wrap_rplidar_response_measurement_node_t_angle_q6_checkbit_get_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->angle_q6_checkbit);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_measurement_node_t_distance_q2_set_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->distance_q2 = arg2;
  
}


short _wrap_rplidar_response_measurement_node_t_distance_q2_get_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->distance_q2);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_measurement_node_t *_wrap_new_rplidar_response_measurement_node_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_measurement_node_t *result = 0 ;
  _rplidar_response_measurement_node_t *_swig_go_result;
  
  
  result = (_rplidar_response_measurement_node_t *)new _rplidar_response_measurement_node_t();
  *(_rplidar_response_measurement_node_t **)&_swig_go_result = (_rplidar_response_measurement_node_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_measurement_node_t_gen_37f4c5c4e69870d1(_rplidar_response_measurement_node_t *_swig_go_0) {
  _rplidar_response_measurement_node_t *arg1 = (_rplidar_response_measurement_node_t *) 0 ;
  
  arg1 = *(_rplidar_response_measurement_node_t **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RPLIDAR_RESP_MEASUREMENT_EXP_ANGLE_MASK_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x3));
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPLIDAR_RESP_MEASUREMENT_EXP_DISTANCE_MASK_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0xFC));
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_cabin_nodes_t_distance_angle_1_set_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->distance_angle_1 = arg2;
  
}


short _wrap_rplidar_response_cabin_nodes_t_distance_angle_1_get_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->distance_angle_1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_cabin_nodes_t_distance_angle_2_set_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->distance_angle_2 = arg2;
  
}


short _wrap_rplidar_response_cabin_nodes_t_distance_angle_2_get_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->distance_angle_2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_cabin_nodes_t_offset_angles_q3_set_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->offset_angles_q3 = arg2;
  
}


char _wrap_rplidar_response_cabin_nodes_t_offset_angles_q3_get_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->offset_angles_q3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_cabin_nodes_t *_wrap_new_rplidar_response_cabin_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_cabin_nodes_t *result = 0 ;
  _rplidar_response_cabin_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_cabin_nodes_t *)new _rplidar_response_cabin_nodes_t();
  *(_rplidar_response_cabin_nodes_t **)&_swig_go_result = (_rplidar_response_cabin_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_cabin_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_cabin_nodes_t *arg1 = (_rplidar_response_cabin_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_cabin_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RPLIDAR_RESP_MEASUREMENT_EXP_SYNCBIT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = (int)((0x1 << 15));
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_capsule_measurement_nodes_t_s_checksum_1_set_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->s_checksum_1 = arg2;
  
}


char _wrap_rplidar_response_capsule_measurement_nodes_t_s_checksum_1_get_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->s_checksum_1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_capsule_measurement_nodes_t_s_checksum_2_set_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->s_checksum_2 = arg2;
  
}


char _wrap_rplidar_response_capsule_measurement_nodes_t_s_checksum_2_get_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->s_checksum_2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_capsule_measurement_nodes_t_start_angle_sync_q6_set_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->start_angle_sync_q6 = arg2;
  
}


short _wrap_rplidar_response_capsule_measurement_nodes_t_start_angle_sync_q6_get_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->start_angle_sync_q6);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_capsule_measurement_nodes_t_cabins_set_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0, _rplidar_response_cabin_nodes_t *_swig_go_1) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_cabin_nodes_t *arg2 ;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = *(rplidar_response_cabin_nodes_t **)&_swig_go_1; 
  
  {
    size_t ii;
    rplidar_response_cabin_nodes_t *b = (rplidar_response_cabin_nodes_t *) arg1->cabins;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((rplidar_response_cabin_nodes_t *) arg2 + ii);
  }
  
}


_rplidar_response_cabin_nodes_t (*_wrap_rplidar_response_capsule_measurement_nodes_t_cabins_get_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0))[16] {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_cabin_nodes_t *result = 0 ;
  _rplidar_response_cabin_nodes_t (*_swig_go_result)[16];
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (rplidar_response_cabin_nodes_t *)(rplidar_response_cabin_nodes_t *) ((arg1)->cabins);
  *(rplidar_response_cabin_nodes_t **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_capsule_measurement_nodes_t *_wrap_new_rplidar_response_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_capsule_measurement_nodes_t *result = 0 ;
  _rplidar_response_capsule_measurement_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_capsule_measurement_nodes_t *)new _rplidar_response_capsule_measurement_nodes_t();
  *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_result = (_rplidar_response_capsule_measurement_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_capsule_measurement_nodes_t *arg1 = (_rplidar_response_capsule_measurement_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_dense_cabin_nodes_t_distance_set_gen_37f4c5c4e69870d1(_rplidar_response_dense_cabin_nodes_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_dense_cabin_nodes_t *arg1 = (_rplidar_response_dense_cabin_nodes_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_dense_cabin_nodes_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->distance = arg2;
  
}


short _wrap_rplidar_response_dense_cabin_nodes_t_distance_get_gen_37f4c5c4e69870d1(_rplidar_response_dense_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_dense_cabin_nodes_t *arg1 = (_rplidar_response_dense_cabin_nodes_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_dense_cabin_nodes_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->distance);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_dense_cabin_nodes_t *_wrap_new_rplidar_response_dense_cabin_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_dense_cabin_nodes_t *result = 0 ;
  _rplidar_response_dense_cabin_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_dense_cabin_nodes_t *)new _rplidar_response_dense_cabin_nodes_t();
  *(_rplidar_response_dense_cabin_nodes_t **)&_swig_go_result = (_rplidar_response_dense_cabin_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_dense_cabin_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_dense_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_dense_cabin_nodes_t *arg1 = (_rplidar_response_dense_cabin_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_dense_cabin_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_dense_capsule_measurement_nodes_t_s_checksum_1_set_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->s_checksum_1 = arg2;
  
}


char _wrap_rplidar_response_dense_capsule_measurement_nodes_t_s_checksum_1_get_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->s_checksum_1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_dense_capsule_measurement_nodes_t_s_checksum_2_set_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->s_checksum_2 = arg2;
  
}


char _wrap_rplidar_response_dense_capsule_measurement_nodes_t_s_checksum_2_get_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->s_checksum_2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_dense_capsule_measurement_nodes_t_start_angle_sync_q6_set_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->start_angle_sync_q6 = arg2;
  
}


short _wrap_rplidar_response_dense_capsule_measurement_nodes_t_start_angle_sync_q6_get_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->start_angle_sync_q6);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_dense_capsule_measurement_nodes_t_cabins_set_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0, _rplidar_response_dense_cabin_nodes_t *_swig_go_1) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_dense_cabin_nodes_t *arg2 ;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = *(rplidar_response_dense_cabin_nodes_t **)&_swig_go_1; 
  
  {
    size_t ii;
    rplidar_response_dense_cabin_nodes_t *b = (rplidar_response_dense_cabin_nodes_t *) arg1->cabins;
    for (ii = 0; ii < (size_t)40; ii++) b[ii] = *((rplidar_response_dense_cabin_nodes_t *) arg2 + ii);
  }
  
}


_rplidar_response_dense_cabin_nodes_t (*_wrap_rplidar_response_dense_capsule_measurement_nodes_t_cabins_get_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0))[40] {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_dense_cabin_nodes_t *result = 0 ;
  _rplidar_response_dense_cabin_nodes_t (*_swig_go_result)[40];
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (rplidar_response_dense_cabin_nodes_t *)(rplidar_response_dense_cabin_nodes_t *) ((arg1)->cabins);
  *(rplidar_response_dense_cabin_nodes_t **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_dense_capsule_measurement_nodes_t *_wrap_new_rplidar_response_dense_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_dense_capsule_measurement_nodes_t *result = 0 ;
  _rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_dense_capsule_measurement_nodes_t *)new _rplidar_response_dense_capsule_measurement_nodes_t();
  *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_result = (_rplidar_response_dense_capsule_measurement_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_dense_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_dense_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_dense_capsule_measurement_nodes_t *arg1 = (_rplidar_response_dense_capsule_measurement_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_dense_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_ultra_cabin_nodes_t_combined_x3_set_gen_37f4c5c4e69870d1(_rplidar_response_ultra_cabin_nodes_t *_swig_go_0, intgo _swig_go_1) {
  _rplidar_response_ultra_cabin_nodes_t *arg1 = (_rplidar_response_ultra_cabin_nodes_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_response_ultra_cabin_nodes_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->combined_x3 = arg2;
  
}


intgo _wrap_rplidar_response_ultra_cabin_nodes_t_combined_x3_get_gen_37f4c5c4e69870d1(_rplidar_response_ultra_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_ultra_cabin_nodes_t *arg1 = (_rplidar_response_ultra_cabin_nodes_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_response_ultra_cabin_nodes_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->combined_x3);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_ultra_cabin_nodes_t *_wrap_new_rplidar_response_ultra_cabin_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_ultra_cabin_nodes_t *result = 0 ;
  _rplidar_response_ultra_cabin_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_ultra_cabin_nodes_t *)new _rplidar_response_ultra_cabin_nodes_t();
  *(_rplidar_response_ultra_cabin_nodes_t **)&_swig_go_result = (_rplidar_response_ultra_cabin_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_ultra_cabin_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_ultra_cabin_nodes_t *_swig_go_0) {
  _rplidar_response_ultra_cabin_nodes_t *arg1 = (_rplidar_response_ultra_cabin_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_ultra_cabin_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_s_checksum_1_set_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->s_checksum_1 = arg2;
  
}


char _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_s_checksum_1_get_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->s_checksum_1);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_s_checksum_2_set_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->s_checksum_2 = arg2;
  
}


char _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_s_checksum_2_get_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->s_checksum_2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_start_angle_sync_q6_set_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->start_angle_sync_q6 = arg2;
  
}


short _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_start_angle_sync_q6_get_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->start_angle_sync_q6);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_ultra_capsule_measurement_nodes_t_ultra_cabins_set_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0, _rplidar_response_ultra_cabin_nodes_t *_swig_go_1) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_ultra_cabin_nodes_t *arg2 ;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = *(rplidar_response_ultra_cabin_nodes_t **)&_swig_go_1; 
  
  {
    size_t ii;
    rplidar_response_ultra_cabin_nodes_t *b = (rplidar_response_ultra_cabin_nodes_t *) arg1->ultra_cabins;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((rplidar_response_ultra_cabin_nodes_t *) arg2 + ii);
  }
  
}


_rplidar_response_ultra_cabin_nodes_t (*_wrap_rplidar_response_ultra_capsule_measurement_nodes_t_ultra_cabins_get_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0))[32] {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_ultra_cabin_nodes_t *result = 0 ;
  _rplidar_response_ultra_cabin_nodes_t (*_swig_go_result)[32];
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (rplidar_response_ultra_cabin_nodes_t *)(rplidar_response_ultra_cabin_nodes_t *) ((arg1)->ultra_cabins);
  *(rplidar_response_ultra_cabin_nodes_t **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_ultra_capsule_measurement_nodes_t *_wrap_new_rplidar_response_ultra_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_ultra_capsule_measurement_nodes_t *result = 0 ;
  _rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_ultra_capsule_measurement_nodes_t *)new _rplidar_response_ultra_capsule_measurement_nodes_t();
  *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_result = (_rplidar_response_ultra_capsule_measurement_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_ultra_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_ultra_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_ultra_capsule_measurement_nodes_t *arg1 = (_rplidar_response_ultra_capsule_measurement_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_ultra_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_measurement_node_hq_t_angle_z_q14_set_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0, short _swig_go_1) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->angle_z_q14 = arg2;
  
}


short _wrap_rplidar_response_measurement_node_hq_t_angle_z_q14_get_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->angle_z_q14);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_measurement_node_hq_t_dist_mm_q2_set_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0, intgo _swig_go_1) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->dist_mm_q2 = arg2;
  
}


intgo _wrap_rplidar_response_measurement_node_hq_t_dist_mm_q2_get_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->dist_mm_q2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_measurement_node_hq_t_quality_set_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0, char _swig_go_1) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->quality = arg2;
  
}


char _wrap_rplidar_response_measurement_node_hq_t_quality_get_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->quality);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_measurement_node_hq_t_flag_set_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0, char _swig_go_1) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->flag = arg2;
  
}


char _wrap_rplidar_response_measurement_node_hq_t_flag_get_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->flag);
  _swig_go_result = result; 
  return _swig_go_result;
}


rplidar_response_measurement_node_hq_t *_wrap_new_rplidar_response_measurement_node_hq_t_gen_37f4c5c4e69870d1() {
  rplidar_response_measurement_node_hq_t *result = 0 ;
  rplidar_response_measurement_node_hq_t *_swig_go_result;
  
  
  result = (rplidar_response_measurement_node_hq_t *)new rplidar_response_measurement_node_hq_t();
  *(rplidar_response_measurement_node_hq_t **)&_swig_go_result = (rplidar_response_measurement_node_hq_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_measurement_node_hq_t_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_hq_capsule_measurement_nodes_t_sync_byte_set_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->sync_byte = arg2;
  
}


char _wrap_rplidar_response_hq_capsule_measurement_nodes_t_sync_byte_get_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->sync_byte);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_hq_capsule_measurement_nodes_t_time_stamp_set_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0, long long _swig_go_1) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  _u64 arg2 ;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u64)_swig_go_1; 
  
  if (arg1) (arg1)->time_stamp = arg2;
  
}


long long _wrap_rplidar_response_hq_capsule_measurement_nodes_t_time_stamp_get_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  _u64 result;
  long long _swig_go_result;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u64) ((arg1)->time_stamp);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_hq_capsule_measurement_nodes_t_node_hq_set_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0, rplidar_response_measurement_node_hq_t *_swig_go_1) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_measurement_node_hq_t *arg2 ;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_1; 
  
  {
    size_t ii;
    rplidar_response_measurement_node_hq_t *b = (rplidar_response_measurement_node_hq_t *) arg1->node_hq;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((rplidar_response_measurement_node_hq_t *) arg2 + ii);
  }
  
}


rplidar_response_measurement_node_hq_t (*_wrap_rplidar_response_hq_capsule_measurement_nodes_t_node_hq_get_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0))[16] {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  rplidar_response_measurement_node_hq_t *result = 0 ;
  rplidar_response_measurement_node_hq_t (*_swig_go_result)[16];
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (rplidar_response_measurement_node_hq_t *)(rplidar_response_measurement_node_hq_t *) ((arg1)->node_hq);
  *(rplidar_response_measurement_node_hq_t **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_hq_capsule_measurement_nodes_t_crc32_set_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0, intgo _swig_go_1) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->crc32 = arg2;
  
}


intgo _wrap_rplidar_response_hq_capsule_measurement_nodes_t_crc32_get_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->crc32);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_hq_capsule_measurement_nodes_t *_wrap_new_rplidar_response_hq_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_hq_capsule_measurement_nodes_t *result = 0 ;
  _rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_result;
  
  
  result = (_rplidar_response_hq_capsule_measurement_nodes_t *)new _rplidar_response_hq_capsule_measurement_nodes_t();
  *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_result = (_rplidar_response_hq_capsule_measurement_nodes_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_hq_capsule_measurement_nodes_t_gen_37f4c5c4e69870d1(_rplidar_response_hq_capsule_measurement_nodes_t *_swig_go_0) {
  _rplidar_response_hq_capsule_measurement_nodes_t *arg1 = (_rplidar_response_hq_capsule_measurement_nodes_t *) 0 ;
  
  arg1 = *(_rplidar_response_hq_capsule_measurement_nodes_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_get_lidar_conf_t_Xtype_set_gen_37f4c5c4e69870d1(_rplidar_response_get_lidar_conf *_swig_go_0, intgo _swig_go_1) {
  _rplidar_response_get_lidar_conf *arg1 = (_rplidar_response_get_lidar_conf *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_response_get_lidar_conf **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


intgo _wrap_rplidar_response_get_lidar_conf_t_Xtype_get_gen_37f4c5c4e69870d1(_rplidar_response_get_lidar_conf *_swig_go_0) {
  _rplidar_response_get_lidar_conf *arg1 = (_rplidar_response_get_lidar_conf *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_response_get_lidar_conf **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->type);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_get_lidar_conf_t_payload_set_gen_37f4c5c4e69870d1(_rplidar_response_get_lidar_conf *_swig_go_0, char *_swig_go_1) {
  _rplidar_response_get_lidar_conf *arg1 = (_rplidar_response_get_lidar_conf *) 0 ;
  _u8 *arg2 ;
  
  arg1 = *(_rplidar_response_get_lidar_conf **)&_swig_go_0; 
  arg2 = *(_u8 **)&_swig_go_1; 
  
  {
    size_t ii;
    _u8 *b = (_u8 *) arg1->payload;
    for (ii = 0; ii < (size_t)0; ii++) b[ii] = *((_u8 *) arg2 + ii);
  }
  
}


char *_wrap_rplidar_response_get_lidar_conf_t_payload_get_gen_37f4c5c4e69870d1(_rplidar_response_get_lidar_conf *_swig_go_0) {
  _rplidar_response_get_lidar_conf *arg1 = (_rplidar_response_get_lidar_conf *) 0 ;
  _u8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(_rplidar_response_get_lidar_conf **)&_swig_go_0; 
  
  result = (_u8 *)(_u8 *) ((arg1)->payload);
  *(_u8 **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_get_lidar_conf *_wrap_new_rplidar_response_get_lidar_conf_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_get_lidar_conf *result = 0 ;
  _rplidar_response_get_lidar_conf *_swig_go_result;
  
  
  result = (_rplidar_response_get_lidar_conf *)new _rplidar_response_get_lidar_conf();
  *(_rplidar_response_get_lidar_conf **)&_swig_go_result = (_rplidar_response_get_lidar_conf *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_get_lidar_conf_t_gen_37f4c5c4e69870d1(_rplidar_response_get_lidar_conf *_swig_go_0) {
  _rplidar_response_get_lidar_conf *arg1 = (_rplidar_response_get_lidar_conf *) 0 ;
  
  arg1 = *(_rplidar_response_get_lidar_conf **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_set_lidar_conf_t_result_set_gen_37f4c5c4e69870d1(_rplidar_response_set_lidar_conf *_swig_go_0, intgo _swig_go_1) {
  _rplidar_response_set_lidar_conf *arg1 = (_rplidar_response_set_lidar_conf *) 0 ;
  _u32 arg2 ;
  
  arg1 = *(_rplidar_response_set_lidar_conf **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  if (arg1) (arg1)->result = arg2;
  
}


intgo _wrap_rplidar_response_set_lidar_conf_t_result_get_gen_37f4c5c4e69870d1(_rplidar_response_set_lidar_conf *_swig_go_0) {
  _rplidar_response_set_lidar_conf *arg1 = (_rplidar_response_set_lidar_conf *) 0 ;
  _u32 result;
  intgo _swig_go_result;
  
  arg1 = *(_rplidar_response_set_lidar_conf **)&_swig_go_0; 
  
  result = (_u32) ((arg1)->result);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_set_lidar_conf *_wrap_new_rplidar_response_set_lidar_conf_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_set_lidar_conf *result = 0 ;
  _rplidar_response_set_lidar_conf *_swig_go_result;
  
  
  result = (_rplidar_response_set_lidar_conf *)new _rplidar_response_set_lidar_conf();
  *(_rplidar_response_set_lidar_conf **)&_swig_go_result = (_rplidar_response_set_lidar_conf *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_set_lidar_conf_t_gen_37f4c5c4e69870d1(_rplidar_response_set_lidar_conf *_swig_go_0) {
  _rplidar_response_set_lidar_conf *arg1 = (_rplidar_response_set_lidar_conf *) 0 ;
  
  arg1 = *(_rplidar_response_set_lidar_conf **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_device_info_t_model_set_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->model = arg2;
  
}


char _wrap_rplidar_response_device_info_t_model_get_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->model);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_device_info_t_firmware_version_set_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->firmware_version = arg2;
  
}


short _wrap_rplidar_response_device_info_t_firmware_version_get_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->firmware_version);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_device_info_t_hardware_version_set_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->hardware_version = arg2;
  
}


char _wrap_rplidar_response_device_info_t_hardware_version_get_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->hardware_version);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_device_info_t_serialnum_set_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0, char *_swig_go_1) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u8 *arg2 ;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  arg2 = *(_u8 **)&_swig_go_1; 
  
  {
    size_t ii;
    _u8 *b = (_u8 *) arg1->serialnum;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((_u8 *) arg2 + ii);
  }
  
}


char *_wrap_rplidar_response_device_info_t_serialnum_get_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  _u8 *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  
  result = (_u8 *)(_u8 *) ((arg1)->serialnum);
  *(_u8 **)&_swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_device_info_t *_wrap_new_rplidar_response_device_info_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_device_info_t *result = 0 ;
  _rplidar_response_device_info_t *_swig_go_result;
  
  
  result = (_rplidar_response_device_info_t *)new _rplidar_response_device_info_t();
  *(_rplidar_response_device_info_t **)&_swig_go_result = (_rplidar_response_device_info_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_device_info_t_gen_37f4c5c4e69870d1(_rplidar_response_device_info_t *_swig_go_0) {
  _rplidar_response_device_info_t *arg1 = (_rplidar_response_device_info_t *) 0 ;
  
  arg1 = *(_rplidar_response_device_info_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_rplidar_response_device_health_t_status_set_gen_37f4c5c4e69870d1(_rplidar_response_device_health_t *_swig_go_0, char _swig_go_1) {
  _rplidar_response_device_health_t *arg1 = (_rplidar_response_device_health_t *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(_rplidar_response_device_health_t **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->status = arg2;
  
}


char _wrap_rplidar_response_device_health_t_status_get_gen_37f4c5c4e69870d1(_rplidar_response_device_health_t *_swig_go_0) {
  _rplidar_response_device_health_t *arg1 = (_rplidar_response_device_health_t *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(_rplidar_response_device_health_t **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->status);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_rplidar_response_device_health_t_error_code_set_gen_37f4c5c4e69870d1(_rplidar_response_device_health_t *_swig_go_0, short _swig_go_1) {
  _rplidar_response_device_health_t *arg1 = (_rplidar_response_device_health_t *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(_rplidar_response_device_health_t **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->error_code = arg2;
  
}


short _wrap_rplidar_response_device_health_t_error_code_get_gen_37f4c5c4e69870d1(_rplidar_response_device_health_t *_swig_go_0) {
  _rplidar_response_device_health_t *arg1 = (_rplidar_response_device_health_t *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(_rplidar_response_device_health_t **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->error_code);
  _swig_go_result = result; 
  return _swig_go_result;
}


_rplidar_response_device_health_t *_wrap_new_rplidar_response_device_health_t_gen_37f4c5c4e69870d1() {
  _rplidar_response_device_health_t *result = 0 ;
  _rplidar_response_device_health_t *_swig_go_result;
  
  
  result = (_rplidar_response_device_health_t *)new _rplidar_response_device_health_t();
  *(_rplidar_response_device_health_t **)&_swig_go_result = (_rplidar_response_device_health_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_rplidar_response_device_health_t_gen_37f4c5c4e69870d1(_rplidar_response_device_health_t *_swig_go_0) {
  _rplidar_response_device_health_t *arg1 = (_rplidar_response_device_health_t *) 0 ;
  
  arg1 = *(_rplidar_response_device_health_t **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RplidarScanMode_id_set_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0, short _swig_go_1) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  _u16 arg2 ;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  if (arg1) (arg1)->id = arg2;
  
}


short _wrap_RplidarScanMode_id_get_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  _u16 result;
  short _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  result = (_u16) ((arg1)->id);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RplidarScanMode_us_per_sample_set_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0, float _swig_go_1) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  float arg2 ;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->us_per_sample = arg2;
  
}


float _wrap_RplidarScanMode_us_per_sample_get_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  result = (float) ((arg1)->us_per_sample);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RplidarScanMode_max_distance_set_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0, float _swig_go_1) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  float arg2 ;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  arg2 = (float)_swig_go_1; 
  
  if (arg1) (arg1)->max_distance = arg2;
  
}


float _wrap_RplidarScanMode_max_distance_get_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  float result;
  float _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  result = (float) ((arg1)->max_distance);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RplidarScanMode_ans_type_set_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0, char _swig_go_1) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  _u8 arg2 ;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  arg2 = (_u8)_swig_go_1; 
  
  if (arg1) (arg1)->ans_type = arg2;
  
}


char _wrap_RplidarScanMode_ans_type_get_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  _u8 result;
  char _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  result = (_u8) ((arg1)->ans_type);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RplidarScanMode_scan_mode_set_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0, _gostring_ _swig_go_1) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  char *arg2 ;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->scan_mode, (const char *)arg2, 64-1);
      arg1->scan_mode[64-1] = 0;
    } else {
      arg1->scan_mode[0] = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_RplidarScanMode_scan_mode_get_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  result = (char *)(char *) ((arg1)->scan_mode);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


rp::standalone::rplidar::RplidarScanMode *_wrap_new_RplidarScanMode_gen_37f4c5c4e69870d1() {
  rp::standalone::rplidar::RplidarScanMode *result = 0 ;
  rp::standalone::rplidar::RplidarScanMode *_swig_go_result;
  
  
  result = (rp::standalone::rplidar::RplidarScanMode *)new rp::standalone::rplidar::RplidarScanMode();
  *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_result = (rp::standalone::rplidar::RplidarScanMode *)result; 
  return _swig_go_result;
}


void _wrap_delete_RplidarScanMode_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RplidarScanMode *_swig_go_0) {
  rp::standalone::rplidar::RplidarScanMode *arg1 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_DRIVER_TYPE_SERIALPORT_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = rp::standalone::rplidar::DRIVER_TYPE_SERIALPORT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_DRIVER_TYPE_TCP_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = rp::standalone::rplidar::DRIVER_TYPE_TCP;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


bool _wrap_ChannelDevice_bind_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (bool)(arg1)->bind((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


bool _wrap_ChannelDevice_open_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  result = (bool)(arg1)->open();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ChannelDevice_close_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  (arg1)->close();
  
}


void _wrap_ChannelDevice_flush_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  (arg1)->flush();
  
}


bool _wrap_ChannelDevice_waitfordata__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0, long long _swig_go_1, intgo _swig_go_2, long long *_swig_go_3) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  size_t arg2 ;
  _u32 arg3 ;
  size_t *arg4 = (size_t *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  arg4 = *(size_t **)&_swig_go_3; 
  
  result = (bool)(arg1)->waitfordata(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ChannelDevice_waitfordata__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0, long long _swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  size_t arg2 ;
  _u32 arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (bool)(arg1)->waitfordata(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_ChannelDevice_waitfordata__SWIG_2_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0, long long _swig_go_1) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  size_t arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = (bool)(arg1)->waitfordata(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ChannelDevice_senddata_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0, char *_swig_go_1, long long _swig_go_2) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  _u8 *arg2 = (_u8 *) 0 ;
  size_t arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  arg2 = *(_u8 **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (int)(arg1)->senddata((_u8 const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ChannelDevice_recvdata_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0, char *_swig_go_1, long long _swig_go_2) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  arg2 = *(unsigned char **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (int)(arg1)->recvdata(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ChannelDevice_setDTR_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  (arg1)->setDTR();
  
}


void _wrap_ChannelDevice_clearDTR_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  (arg1)->clearDTR();
  
}


void _wrap_ChannelDevice_ReleaseRxTx_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  (arg1)->ReleaseRxTx();
  
}


void _wrap_delete_ChannelDevice_gen_37f4c5c4e69870d1(rp::standalone::rplidar::ChannelDevice *_swig_go_0) {
  rp::standalone::rplidar::ChannelDevice *arg1 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_DEFAULT_TIMEOUT_RPlidarDriver_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = rp::standalone::rplidar::RPlidarDriver::DEFAULT_TIMEOUT;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MAX_SCAN_NODES_RPlidarDriver_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = rp::standalone::rplidar::RPlidarDriver::MAX_SCAN_NODES;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_LEGACY_SAMPLE_DURATION_RPlidarDriver_gen_37f4c5c4e69870d1() {
  int result;
  intgo _swig_go_result;
  
  
  result = rp::standalone::rplidar::RPlidarDriver::LEGACY_SAMPLE_DURATION;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


rp::standalone::rplidar::RPlidarDriver *_wrap_RPlidarDriver_CreateDriver__SWIG_0_gen_37f4c5c4e69870d1(intgo _swig_go_0) {
  _u32 arg1 ;
  rp::standalone::rplidar::RPlidarDriver *result = 0 ;
  rp::standalone::rplidar::RPlidarDriver *_swig_go_result;
  
  arg1 = (_u32)_swig_go_0; 
  
  result = (rp::standalone::rplidar::RPlidarDriver *)rp::standalone::rplidar::RPlidarDriver::CreateDriver(arg1);
  *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_result = (rp::standalone::rplidar::RPlidarDriver *)result; 
  return _swig_go_result;
}


rp::standalone::rplidar::RPlidarDriver *_wrap_RPlidarDriver_CreateDriver__SWIG_1_gen_37f4c5c4e69870d1() {
  rp::standalone::rplidar::RPlidarDriver *result = 0 ;
  rp::standalone::rplidar::RPlidarDriver *_swig_go_result;
  
  
  result = (rp::standalone::rplidar::RPlidarDriver *)rp::standalone::rplidar::RPlidarDriver::CreateDriver();
  *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_result = (rp::standalone::rplidar::RPlidarDriver *)result; 
  return _swig_go_result;
}


void _wrap_RPlidarDriver_DisposeDriver_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  rp::standalone::rplidar::RPlidarDriver::DisposeDriver(arg1);
  
}


intgo _wrap_RPlidarDriver_connect__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  _u32 arg3 ;
  _u32 arg4 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (_u32)_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  
  result = (u_result)(arg1)->connect((char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_connect__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  char *arg2 = (char *) 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->connect((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_RPlidarDriver_disconnect_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  (arg1)->disconnect();
  
}


bool _wrap_RPlidarDriver_isConnected_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (bool)(arg1)->isConnected();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_reset__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, intgo _swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u32 arg2 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  result = (u_result)(arg1)->reset(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_reset__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (u_result)(arg1)->reset();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_clearNetSerialRxCache_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (u_result)(arg1)->clearNetSerialRxCache();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getAllSupportedScanModes__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, std::vector< rp::standalone::rplidar::RplidarScanMode > *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  std::vector< rp::standalone::rplidar::RplidarScanMode > *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(std::vector< rp::standalone::rplidar::RplidarScanMode > **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->getAllSupportedScanModes(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getAllSupportedScanModes__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, std::vector< rp::standalone::rplidar::RplidarScanMode > *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  std::vector< rp::standalone::rplidar::RplidarScanMode > *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(std::vector< rp::standalone::rplidar::RplidarScanMode > **)&_swig_go_1; 
  
  result = (u_result)(arg1)->getAllSupportedScanModes(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getTypicalScanMode__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _u16 *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u16 *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(_u16 **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->getTypicalScanMode(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getTypicalScanMode__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _u16 *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u16 *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(_u16 **)&_swig_go_1; 
  
  result = (u_result)(arg1)->getTypicalScanMode(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScan__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, bool _swig_go_2, intgo _swig_go_3, rp::standalone::rplidar::RplidarScanMode *_swig_go_4) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  _u32 arg4 ;
  rp::standalone::rplidar::RplidarScanMode *arg5 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  arg5 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_4; 
  
  result = (u_result)(arg1)->startScan(arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScan__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  _u32 arg4 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  
  result = (u_result)(arg1)->startScan(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScan__SWIG_2_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, bool _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (u_result)(arg1)->startScan(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScanExpress__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, short _swig_go_2, intgo _swig_go_3, rp::standalone::rplidar::RplidarScanMode *_swig_go_4, intgo _swig_go_5) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  _u16 arg3 ;
  _u32 arg4 ;
  rp::standalone::rplidar::RplidarScanMode *arg5 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  _u32 arg6 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (_u16)_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  arg5 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_4; 
  arg6 = (_u32)_swig_go_5; 
  
  result = (u_result)(arg1)->startScanExpress(arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScanExpress__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, short _swig_go_2, intgo _swig_go_3, rp::standalone::rplidar::RplidarScanMode *_swig_go_4) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  _u16 arg3 ;
  _u32 arg4 ;
  rp::standalone::rplidar::RplidarScanMode *arg5 = (rp::standalone::rplidar::RplidarScanMode *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (_u16)_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  arg5 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_4; 
  
  result = (u_result)(arg1)->startScanExpress(arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScanExpress__SWIG_2_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, short _swig_go_2, intgo _swig_go_3) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  _u16 arg3 ;
  _u32 arg4 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (_u16)_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  
  result = (u_result)(arg1)->startScanExpress(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScanExpress__SWIG_3_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, short _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  _u16 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (_u16)_swig_go_2; 
  
  result = (u_result)(arg1)->startScanExpress(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getHealth__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_device_health_t *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_device_health_t *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_device_health_t **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->getHealth(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getHealth__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_device_health_t *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_device_health_t *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_device_health_t **)&_swig_go_1; 
  
  result = (u_result)(arg1)->getHealth(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getDeviceInfo__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_device_info_t *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_device_info_t *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_device_info_t **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->getDeviceInfo(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getDeviceInfo__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_device_info_t *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_device_info_t *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_device_info_t **)&_swig_go_1; 
  
  result = (u_result)(arg1)->getDeviceInfo(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getSampleDuration_uS__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_sample_rate_t *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_sample_rate_t *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_sample_rate_t **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->getSampleDuration_uS(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getSampleDuration_uS__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_sample_rate_t *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_sample_rate_t *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_sample_rate_t **)&_swig_go_1; 
  
  result = (u_result)(arg1)->getSampleDuration_uS(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_setMotorPWM_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, short _swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u16 arg2 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  result = (u_result)(arg1)->setMotorPWM(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_setLidarSpinSpeed__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, short _swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u16 arg2 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->setLidarSpinSpeed(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_setLidarSpinSpeed__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, short _swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u16 arg2 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (_u16)_swig_go_1; 
  
  result = (u_result)(arg1)->setLidarSpinSpeed(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startMotor_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (u_result)(arg1)->startMotor();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_stopMotor_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (u_result)(arg1)->stopMotor();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_checkMotorCtrlSupport__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->checkMotorCtrlSupport(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_checkMotorCtrlSupport__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  
  result = (u_result)(arg1)->checkMotorCtrlSupport(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_checkIfTofLidar__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->checkIfTofLidar(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_checkIfTofLidar__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  
  result = (u_result)(arg1)->checkIfTofLidar(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getFrequency__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, long long _swig_go_2, float *_swig_go_3, bool *_swig_go_4) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  size_t arg3 ;
  float *arg4 = 0 ;
  bool *arg5 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(float **)&_swig_go_3; 
  arg5 = *(bool **)&_swig_go_4; 
  
  result = (u_result)(arg1)->getFrequency(arg2,arg3,*arg4,*arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getFrequency__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, rp::standalone::rplidar::RplidarScanMode *_swig_go_1, long long _swig_go_2, float *_swig_go_3) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rp::standalone::rplidar::RplidarScanMode *arg2 = 0 ;
  size_t arg3 ;
  float *arg4 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rp::standalone::rplidar::RplidarScanMode **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  arg4 = *(float **)&_swig_go_3; 
  
  result = (u_result)(arg1)->getFrequency((rp::standalone::rplidar::RplidarScanMode const &)*arg2,arg3,*arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScanNormal__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->startScanNormal(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_startScanNormal__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool _swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool arg2 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (u_result)(arg1)->startScanNormal(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_checkExpressScanSupported__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool *arg2 = 0 ;
  _u32 arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  arg3 = (_u32)_swig_go_2; 
  
  result = (u_result)(arg1)->checkExpressScanSupported(*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_checkExpressScanSupported__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, bool *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  bool *arg2 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(bool **)&_swig_go_1; 
  
  result = (u_result)(arg1)->checkExpressScanSupported(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_stop__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, intgo _swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  _u32 arg2 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = (_u32)_swig_go_1; 
  
  result = (u_result)(arg1)->stop(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_stop__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (u_result)(arg1)->stop();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_grabScanData__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_measurement_node_t *_swig_go_1, size_t *_swig_go_2, intgo _swig_go_3) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_t *arg2 = (rplidar_response_measurement_node_t *) 0 ;
  size_t *arg3 = 0 ;
  _u32 arg4 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_t **)&_swig_go_1; 
  arg3 = *(size_t **)&_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  
  result = (u_result)(arg1)->grabScanData(arg2,*arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_grabScanData__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_measurement_node_t *_swig_go_1, size_t *_swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_t *arg2 = (rplidar_response_measurement_node_t *) 0 ;
  size_t *arg3 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_t **)&_swig_go_1; 
  arg3 = *(size_t **)&_swig_go_2; 
  
  result = (u_result)(arg1)->grabScanData(arg2,*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_grabScanDataHq__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, rplidar_response_measurement_node_hq_t *_swig_go_1, size_t *_swig_go_2, intgo _swig_go_3) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_hq_t *arg2 = (rplidar_response_measurement_node_hq_t *) 0 ;
  size_t *arg3 = 0 ;
  _u32 arg4 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_1; 
  arg3 = *(size_t **)&_swig_go_2; 
  arg4 = (_u32)_swig_go_3; 
  
  result = (u_result)(arg1)->grabScanDataHq(arg2,*arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_grabScanDataHq__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, rplidar_response_measurement_node_hq_t *_swig_go_1, size_t *_swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_hq_t *arg2 = (rplidar_response_measurement_node_hq_t *) 0 ;
  size_t *arg3 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_1; 
  arg3 = *(size_t **)&_swig_go_2; 
  
  result = (u_result)(arg1)->grabScanDataHq(arg2,*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_ascendScanData__SWIG_0_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_measurement_node_t *_swig_go_1, long long _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_t *arg2 = (rplidar_response_measurement_node_t *) 0 ;
  size_t arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_t **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (u_result)(arg1)->ascendScanData(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_ascendScanData__SWIG_1_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, rplidar_response_measurement_node_hq_t *_swig_go_1, long long _swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_hq_t *arg2 = (rplidar_response_measurement_node_hq_t *) 0 ;
  size_t arg3 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_1; 
  arg3 = (size_t)_swig_go_2; 
  
  result = (u_result)(arg1)->ascendScanData(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getScanDataWithInterval_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, _rplidar_response_measurement_node_t *_swig_go_1, size_t *_swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_t *arg2 = (rplidar_response_measurement_node_t *) 0 ;
  size_t *arg3 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_t **)&_swig_go_1; 
  arg3 = *(size_t **)&_swig_go_2; 
  
  result = (u_result)(arg1)->getScanDataWithInterval(arg2,*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RPlidarDriver_getScanDataWithIntervalHq_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, rplidar_response_measurement_node_hq_t *_swig_go_1, size_t *_swig_go_2) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rplidar_response_measurement_node_hq_t *arg2 = (rplidar_response_measurement_node_hq_t *) 0 ;
  size_t *arg3 = 0 ;
  u_result result;
  intgo _swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_1; 
  arg3 = *(size_t **)&_swig_go_2; 
  
  result = (u_result)(arg1)->getScanDataWithIntervalHq(arg2,*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RPlidarDriver_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RPlidarDriver__chanDev_set_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0, rp::standalone::rplidar::ChannelDevice *_swig_go_1) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rp::standalone::rplidar::ChannelDevice *arg2 = (rp::standalone::rplidar::ChannelDevice *) 0 ;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  arg2 = *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_1; 
  
  if (arg1) (arg1)->_chanDev = arg2;
  
}


rp::standalone::rplidar::ChannelDevice *_wrap_RPlidarDriver__chanDev_get_gen_37f4c5c4e69870d1(rp::standalone::rplidar::RPlidarDriver *_swig_go_0) {
  rp::standalone::rplidar::RPlidarDriver *arg1 = (rp::standalone::rplidar::RPlidarDriver *) 0 ;
  rp::standalone::rplidar::ChannelDevice *result = 0 ;
  rp::standalone::rplidar::ChannelDevice *_swig_go_result;
  
  arg1 = *(rp::standalone::rplidar::RPlidarDriver **)&_swig_go_0; 
  
  result = (rp::standalone::rplidar::ChannelDevice *) ((arg1)->_chanDev);
  *(rp::standalone::rplidar::ChannelDevice **)&_swig_go_result = (rp::standalone::rplidar::ChannelDevice *)result; 
  return _swig_go_result;
}


rplidar_response_measurement_node_hq_t *_wrap_new_measurementNodeHqArray_gen_37f4c5c4e69870d1(intgo _swig_go_0) {
  int arg1 ;
  rplidar_response_measurement_node_hq_t *result = 0 ;
  rplidar_response_measurement_node_hq_t *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (rplidar_response_measurement_node_hq_t *)new_measurementNodeHqArray(arg1);
  *(rplidar_response_measurement_node_hq_t **)&_swig_go_result = (rplidar_response_measurement_node_hq_t *)result; 
  return _swig_go_result;
}


void _wrap_delete_measurementNodeHqArray_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  
  delete_measurementNodeHqArray(arg1);
  
}


rplidar_response_measurement_node_hq_t *_wrap_measurementNodeHqArray_getitem_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0, intgo _swig_go_1) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  int arg2 ;
  rplidar_response_measurement_node_hq_t result;
  rplidar_response_measurement_node_hq_t *_swig_go_result;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = measurementNodeHqArray_getitem(arg1,arg2);
  *(rplidar_response_measurement_node_hq_t **)&_swig_go_result = new rplidar_response_measurement_node_hq_t(result); 
  return _swig_go_result;
}


void _wrap_measurementNodeHqArray_setitem_gen_37f4c5c4e69870d1(rplidar_response_measurement_node_hq_t *_swig_go_0, intgo _swig_go_1, rplidar_response_measurement_node_hq_t *_swig_go_2) {
  rplidar_response_measurement_node_hq_t *arg1 = (rplidar_response_measurement_node_hq_t *) 0 ;
  int arg2 ;
  rplidar_response_measurement_node_hq_t arg3 ;
  rplidar_response_measurement_node_hq_t *argp3 ;
  
  arg1 = *(rplidar_response_measurement_node_hq_t **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  argp3 = (rplidar_response_measurement_node_hq_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null rplidar_response_measurement_node_hq_t");
  }
  arg3 = (rplidar_response_measurement_node_hq_t)*argp3;
  
  
  measurementNodeHqArray_setitem(arg1,arg2,arg3);
  
}


#ifdef __cplusplus
}
#endif

